<?xml version="1.0" encoding="utf-8"?>
<function>
    <description>
Execute a single SQL query.
The connection parameter is optional, if not given the last created connection will be used.
the timeout parameter is optional. The default is set to 30 seconds. when the query takes longer than the given
timeout it will stop. A timeout of 0 means that there is no limit.
The return value of this construct depends on the type of query. If the query results in a result set it will return
an iterator that will iterate over every row in that set. If the query is an update, insert or delete query it
will return the number of affected rows.

## Parameters
If your query requires input it is generally bad practice to use string concatenation to build your own queries.
The correct way to do this it by using parameterization. This you can do in two ways.

### Named Parameters
To create parameters that are labeled, you can use the colon-syntax.

SELECT * from table WHERE column = :name

If you do this, the parameters input has to be an object containing all the used parameter labels as keys.

### Ordered Parameters
An other way is to not use labels but order your list for input parameters.

SELECT * from table WHERE column = ? AND other = ?

If you use this syntax, your parameters input should be a list containing the same amount of elements as question marks.
    </description>
    <examples>
        <example title="Usage">
            <header>Create a table and insert data</header>
            <code>
                use MySQL as db, System;

                // First we connect to a database
                db.connect(
                    "jdbc:mysql://localhost/my-database" ::
                    "?user=root" ::
                    "&amp;password=super1secret"
                );

                // Then we create a table
                db.query("CREATE TABLE test (id VARCHAR(20))");

                // And insert some data
                var insertQuery = "INSERT INTO test (id) VALUES (?)";
                var count = db.query(insertQuery, ["Hello"]);
                count += db.query(insertQuery, ["World"]);

                System.print("Inserted " :: count :: " rows");

                // Now we can query that data
                var rows = db.query("SELECT * FROM test");

                foreach(row in rows) {
                    System.print("Item: " :: row.id);
                }
            </code>
            <header>Explicitly pass a connection</header>
            <code>
                use MySQL as db;

                // Connect to your database
                db.connect(
                    "jdbc:mysql://localhost/my-database" ::
                    "?user=root" ::
                    "&amp;password=super1secret"
                );

                // Now we can use this connection explicitly
                db.query("INSERT INTO example (name) VALUES (?)", ["Doe"], 0, connection);
            </code>
            <header>Use an object as parameters</header>
            <code>
                use MySQL as db;

                // Connect to your database
                db.connect(
                    "jdbc:mysql://localhost/my-database" ::
                    "?user=root" ::
                    "&amp;password=super1secret"
                );

                var object = {
                    "firstName": "John",
                    "lastName": "Doe"
                };

                // Insert a row. Notice that we now use a different notation for the parameters
                db.query("INSERT INTO people (firstName, lastName) VALUES (:firstName, :lastName)", object);
            </code>
        </example>
    </examples>
    <references>
        <reference>connect</reference>
    </references>
</function>